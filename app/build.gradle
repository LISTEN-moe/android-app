import org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.apollographql.apollo'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.0'

    defaultConfig {
        applicationId 'me.echeung.moemoekyun'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 92
        versionName '5.2.2'
    }

    buildFeatures {
        dataBinding = true
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix ' DEBUG'
        }
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'variant'

    productFlavors {
        playstore {
            dimension 'variant'
        }
        fdroid {
            dimension 'variant'

            applicationIdSuffix '.fdroid'
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'

        enable 'ObsoleteSdkInt'

        abortOnError true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    dependenciesInfo {
        includeInApk = false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    final coroutines_version = '1.4.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation 'org.koin:koin-android:2.2.1'

    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-alpha1'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.0-beta02'
    implementation 'androidx.media:media:1.2.1'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-beta01'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'

    implementation 'com.google.android.material:material:1.2.1'

    implementation 'com.github.tfcporciuncula:flow-preferences:1.3.1'

    implementation 'com.squareup.okhttp3:okhttp:4.10.0-RC1'
    implementation 'com.squareup.moshi:moshi:1.8.0'

    implementation "com.apollographql.apollo:apollo-runtime:$apollo_version"
    implementation "com.apollographql.apollo:apollo-http-cache:$apollo_version"
    implementation "com.apollographql.apollo:apollo-coroutines-support:$apollo_version"

    final glide_version = '4.11.0'
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    final exoplayer_version = '2.12.2'
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    playstoreImplementation "com.google.android.exoplayer:extension-cast:$exoplayer_version"

    // Google Cast support (not available in fdroid flavour)
    playstoreImplementation 'com.google.android.gms:play-services-cast-framework:19.0.0'

    implementation 'de.psdev.licensesdialog:licensesdialog:2.1.0'

    // For detecting memory leaks; see https://square.github.io/leakcanary/
//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'
}

apollo {
    generateKotlinModels = true
}

buildscript {
    ext.apollo_version = '2.4.6'
    repositories {
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${BuildPluginsVersion.KOTLIN}"
        classpath "com.apollographql.apollo:apollo-gradle-plugin:$apollo_version"
    }
}

// See https://kotlinlang.org/docs/reference/experimental.html#experimental-status-of-experimental-api-markers
tasks.withType(AbstractKotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xopt-in=kotlin.Experimental"]
}

preBuild.dependsOn(ktlintFormat)
